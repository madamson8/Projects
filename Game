package com.thefallenpaladin.fighting;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/**
 * Created by ma039102 on 11/30/2015.
 *
 * Game currently starts after 5 seconds
 */
public class Game extends JPanel implements MouseListener, KeyListener {

    final int WINDOW_WIDTH = 600;
    final int WINDOW_HEIGHT = WINDOW_WIDTH / 10 * 8;

    int level = 0; // Gamestate stats.
    int mouseX;
    int mouseY;
    public int playerOnePosX = 200;
    public int playerTwoPosX = 400;
    public int playerOnePosY = 300;
    public int playerTwoPosY = 300;
    boolean requestClosing = false;
    boolean gravity = true;

    public Timer timer; // Timer stats
    public int timerSpeed;

    int buttonX = 300;
    int buttonY = 150;
    int buttonS = 50;

    //DO NOT TOUCH
    int secondsPassed = 0;
    long currentTime = System.currentTimeMillis();
    boolean openAllowed = false;
    //Test variables

    boolean Once = true;

    public static void main(String[] args) {
        Game game = new Game();

        game.windowOne();
        game.gameTimer();
    }

    public void windowOne() {
        Game game = new Game();

        level = 1;
        JFrame windowOne = new JFrame("1"); // Creates the window  ,note: outside of windowOne() so it can be disposed.
        windowOne.setSize(WINDOW_WIDTH, WINDOW_HEIGHT); // Sets size
        windowOne.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); // Sets close on exit
        windowOne.setResizable(false);
        windowOne.setVisible(true);
        windowOne.add(game); // adds the game so that you can add things like listeners to it later.
        windowOne.addMouseListener(game); // Generally, JFrames should only hold one focus or listener
        windowOne.setFocusable(true);
        windowOne.requestFocusInWindow();
        windowOne.setLocationRelativeTo(null); // sets the location of the jframe in the middle of the screen
    }

    public void running() {
        Game game = new Game();
        
        if(currentTime+1000 < System.currentTimeMillis()) { //Calculates One second
            currentTime = System.currentTimeMillis();// Resets the calculations
            secondsPassed += 1; // How many seconds have passed since the last reset or start of game.
        }

        if(requestClosing) {
            loadingScreen();
        }

        if(secondsPassed > 5 && openAllowed) {
            requestClosing = true;
            openAllowed = false;
        }
    }

    public void closing() {
        if(requestClosing) {
            loadingScreen();
            requestClosing = false;
            System.out.println("Fine");
        }
    }

    public void loadingScreen() { // Initializes the loading screen.
        level = 2;
        JFrame loading = new JFrame("2");
        loading.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        loading.setSize(WINDOW_WIDTH,WINDOW_HEIGHT);
        loading.setResizable(false);
        loading.setVisible(true);
        loading.setLocationRelativeTo(null);
        try {
            windowTwo();
        } catch (Exception e) {
            e.printStackTrace();
        }
        loading.dispose();
    }

    public void windowTwo() { // Declares fighting screen. refer to windowOne if not sure what commands do
        Game game = new Game();

        level = 3;
        JFrame windowTwo = new JFrame("3");
        windowTwo.add(game);
        windowTwo.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        windowTwo.setResizable(false);
        windowTwo.setVisible(true);
        windowTwo.addKeyListener(game);
        windowTwo.setFocusable(true);
        windowTwo.setSize(WINDOW_WIDTH,WINDOW_HEIGHT);
        windowTwo.setLocationRelativeTo(null);
    }

    @Override
    public void paintComponent(Graphics g) { // as little logic as possible goes in here
        g.fillRect(buttonX,buttonY,buttonS,buttonS);
    }

    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {
        mouseX = e.getX();
        mouseY = e.getY();
        if(mouseX > buttonX && //Not recongized for some reason.  TODO
                mouseX < buttonX + buttonS) {
            this.requestClosing = true;
            closing();
//            loadingScreen();
        }
        System.out.println(requestClosing);
    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {
        System.out.println(e);
    }

    @Override
    public void keyReleased(KeyEvent e) {

    }

    @SuppressWarnings("unchecked")
    public void gameTimer(){
        timer = new Timer(timerSpeed, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                running();
                closing();
            }
        });
        timer.start();
    }
}
